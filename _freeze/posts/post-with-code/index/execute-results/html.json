{
  "hash": "3f260c1392d13b7fb62300610f8abcbe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting to know ggplot2\"\nauthor: \"Elizabeth Leshuk\"\ndate: \"2024-06-11\"\ncategories: [code, plotting]\nimage: \"image.jpg\"\nfilters:\n  - shinylive\nexecute:\n  echo: true\n  results: 'hide' \n  fig-show: 'hold'\n---\n\n\n### What is ggplot2?\n\nggplot takes in data frames and\n\n### Structure of a ggplot\n\n-   Data\n    -   What information do we want to show from the data collected? Can we determine if there is a connection between two variables?\n\n        -   Anu example: relationship between light recipe and plant weight.\n-   Geometry\n    -   What is the best way to communicate what the data is showing us?\n        -   Scatter plot? Bar plot? Line plot? Other?\n-   Aesthetics\n    -   How do we want the plot to look?\n\n        -   Theme, colors, shapes, error bars.\n\n### Build a simple plot - scatterplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install tidyverse package, or alternatively just install ggplot2\n# install.packages(\"tidyverse\")\n# Install palmerpenguins to get access to penguins dataset\n# install.packages(\"palmerpenguins\")\n# install.packages(\"shinylive\")\n\n# Load library\nlibrary(ggplot2) \nlibrary(palmerpenguins)\n# Load palmer penguins data\n# data(package = 'palmerpenguins')\n\n# Read in your df\ndf <- penguins\n\n# Aesthetic mappings describe how variables in the data are mapped to visual properties (aesthetics) of geoms. Aesthetic mappings can be set in ggplot() and in individual layers.\n\n# Basic plot\np_simple <- ggplot(df, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  # Include a \"+\" symbol at the end of each line when adding additional components\n  geom_point()\np_simple\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/base_plot-1.png){width=672}\n:::\n:::\n\n\n### How do we build on this?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Additional features to make the plot look prettier\n# Change the shapes of the dots of each species\np <- ggplot(df, aes(x = body_mass_g, y = bill_length_mm, color = species, shape = species)) + \n  geom_point() +\n  # Add trend line, with method = linear regression (lm = linear model)\n  geom_smooth(method = lm, se=FALSE) +\n  # Add a title\n  ggtitle(paste0(\"Body Mass (g) vs. Bill Length (mm)\")) +\n  # Increase the number of x-axis ticks\n  scale_x_continuous(breaks = round(seq(min(df$body_mass_g, na.rm = TRUE), max(df$body_mass_g, na.rm = TRUE), by = 500),1)) +\n  # Increase the number of y-axis ticks\n  scale_y_continuous(breaks = round(seq(min(df$bill_length_mm, na.rm = TRUE), max(df$bill_length_mm, na.rm = TRUE), by = 5),1)) +\n  # Makes background white, looks a little cleaner\n  theme_bw()\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_add_themes-1.png){width=672}\n:::\n:::\n\n\n### Other ways to visualize this data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Facet data by species\nfacet_plot <- p + \n  # Facet data based on penguin species\n  # Scales options are: \"fixed\", \"free\", \"free_x\", \"free_y\" - fixed = default\n  facet_wrap(facets = df$species, scales = \"fixed\") +\n  # Format the text at the bottom of the plots so that it's at a 45 degree angle\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\nfacet_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/facets-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n  penguin_species <- unique(penguin_summary$species)\n  titlePanel(\"Selected Category\"),\n  sidebarLayout(\n    sidebarPanel(\n      # Input for selecting the x-axis variable\n      selectInput(\"species\", \"Select species:\", choices = c(penguin_species))\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  mets <- colnames(df)\n  long_data <- gather(df, metric, value, bill_length_mm:body_mass_g, factor_key = TRUE)\n  penguin_summary <- Rmisc::summarySE(long_data, measurevar = \"value\", groupvars = c(\"species\", \"metric\", \"year\"), na.rm = TRUE)\n  \n  output$plot <- renderPlot({\n    ggplot(penguin_summary, aes(x = input$species, y = metric, color = species)) +\n      geom_bar() +\n      theme_bw()\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\n\n\n### Other plot types\n\n### ggplot2 in R Shiny\n\n### Additional\n\n-   ggplotly\n\n### Resources\n\n-   [ggplot2](https://ggplot2.tidyverse.org/)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}