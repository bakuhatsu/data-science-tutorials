---
title: "Getting to know ggplot2"
author: "Elizabeth Leshuk"
date: "2024-06-11"
categories: [code, plotting]
image: "image.jpg"
filters:
  - shinylive
execute:
  echo: true
  results: 'hide' 
  fig-show: 'hold'
---

### What is ggplot2?

ggplot takes in data frames and

### Structure of a ggplot

-   Data
    -   What information do we want to show from the data collected? Can we determine if there is a connection between two variables?

        -   Anu example: relationship between light recipe and plant weight.
-   Geometry
    -   What is the best way to communicate what the data is showing us?
        -   Scatter plot? Bar plot? Line plot? Other?
-   Aesthetics
    -   How do we want the plot to look?

        -   Theme, colors, shapes, error bars.

### Build a simple plot - scatterplot

```{r base_plot, warning=FALSE}

# Install tidyverse package, or alternatively just install ggplot2
# install.packages("tidyverse")
# Install palmerpenguins to get access to penguins dataset
# install.packages("palmerpenguins")
# install.packages("shinylive")

# Load library
library(ggplot2) 
library(palmerpenguins)
# Load palmer penguins data
# data(package = 'palmerpenguins')

# Read in your df
df <- penguins

# Aesthetic mappings describe how variables in the data are mapped to visual properties (aesthetics) of geoms. Aesthetic mappings can be set in ggplot() and in individual layers.

# Basic plot
p_simple <- ggplot(df, aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  # Include a "+" symbol at the end of each line when adding additional components
  geom_point()
p_simple
```

### How do we build on this?

```{r plot_add_themes, warning=FALSE, message=FALSE}

# Additional features to make the plot look prettier
# Change the shapes of the dots of each species
p <- ggplot(df, aes(x = body_mass_g, y = bill_length_mm, color = species, shape = species)) + 
  geom_point() +
  # Add trend line, with method = linear regression (lm = linear model)
  geom_smooth(method = lm, se=FALSE) +
  # Add a title
  ggtitle(paste0("Body Mass (g) vs. Bill Length (mm)")) +
  # Increase the number of x-axis ticks
  scale_x_continuous(breaks = round(seq(min(df$body_mass_g, na.rm = TRUE), max(df$body_mass_g, na.rm = TRUE), by = 500),1)) +
  # Increase the number of y-axis ticks
  scale_y_continuous(breaks = round(seq(min(df$bill_length_mm, na.rm = TRUE), max(df$bill_length_mm, na.rm = TRUE), by = 5),1)) +
  # Makes background white, looks a little cleaner
  theme_bw()

p

```

### Other ways to visualize this data

```{r facets}
# Facet data by species
facet_plot <- p + 
  # Facet data based on penguin species
  # Scales options are: "fixed", "free", "free_x", "free_y" - fixed = default
  facet_wrap(facets = df$species, scales = "fixed") +
  # Format the text at the bottom of the plots so that it's at a 45 degree angle
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
facet_plot
```

```{r, echo = FALSE}
library(tidyr)
# Make df long
mets <- colnames(df)
long_data <- gather(df, metric, value, bill_length_mm:body_mass_g, factor_key = TRUE)
penguin_summary <- Rmisc::summarySE(long_data, measurevar = "value", groupvars = c("species", "metric", "year"), na.rm = TRUE)
penguin_species <- unique(penguin_summary$species)
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- fluidPage(
  penguin_species <- unique(penguin_summary$species)
  titlePanel("Selected Category"),
  sidebarLayout(
    sidebarPanel(
      # Input for selecting the x-axis variable
      selectInput("species", "Select species:", choices = c(penguin_species))
    ),
    mainPanel(
      plotOutput("plot")
    )
  )
)

server <- function(input, output, session) {
  mets <- colnames(df)
  long_data <- gather(df, metric, value, bill_length_mm:body_mass_g, factor_key = TRUE)
  penguin_summary <- Rmisc::summarySE(long_data, measurevar = "value", groupvars = c("species", "metric", "year"), na.rm = TRUE)
  
  output$plot <- renderPlot({
    ggplot(penguin_summary, aes(x = input$species, y = metric, color = species)) +
      geom_bar() +
      theme_bw()
  })
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(
  sidebar = sidebar(open = "open",
    numericInput("n", "Sample count", 100),
    checkboxInput("pause", "Pause", FALSE),
  ),
  plotOutput("plot", width=1100)
)

server <- function(input, output, session) {
  data <- reactive({
    input$resample
    if (!isTRUE(input$pause)) {
      invalidateLater(1000)
    }
    rnorm(input$n)
  })
  
  output$plot <- renderPlot({
    hist(data(),
      breaks = 40,
      xlim = c(-2, 2),
      ylim = c(0, 1),
      lty = "blank",
      xlab = "value",
      freq = FALSE,
      main = ""
    )
    
    x <- seq(from = -2, to = 2, length.out = 500)
    y <- dnorm(x)
    lines(x, y, lwd=1.5)
    
    lwd <- 5
    abline(v=0, col="red", lwd=lwd, lty=2)
    abline(v=mean(data()), col="blue", lwd=lwd, lty=1)

    legend(legend = c("Normal", "Mean", "Sample mean"),
      col = c("black", "red", "blue"),
      lty = c(1, 2, 1),
      lwd = c(1, lwd, lwd),
      x = 1,
      y = 0.9
    )
  }, res=140)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

### Other plot types

### ggplot2 in R Shiny

### Additional

-   ggplotly

### Resources

-   [ggplot2](https://ggplot2.tidyverse.org/)
